#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lab_usage() {
  if [[ -n $long_usage ]]; then
    printf "lab - Sample application that uses the default command option\n"
    echo

  else
    printf "lab - Sample application that uses the default command option\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lab COMMAND\n"
  printf "  lab [COMMAND] --help | -h\n"
  printf "  lab --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Scans machines and shows if they are reachable\n" "scan    "
  printf "  %s   Wakes up a specific machine in the laboratory\n" "wake    "
  printf "  %s   Shut down a selected machine in the laboratory\n" "shutdown"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
lab_scan_usage() {
  if [[ -n $long_usage ]]; then
    printf "lab scan - Scans machines and shows if they are reachable\n"
    echo

  else
    printf "lab scan - Scans machines and shows if they are reachable\n"
    echo

  fi

  printf "Alias: sL\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lab scan [HOSTNAME] [OPTIONS]\n"
  printf "  lab scan --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--all, -a"
    printf "    Target all machines\n"
    echo

    # :flag.usage
    printf "  %s\n" "--users, -u"
    printf "    Show connected users\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f FILEPATH"
    printf "    Allows to pass as data source a text file with the target addresses.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOSTNAME"
    printf "    Machine to scan\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  messylab sL 155.210.154.201\n"
    printf "  messylab sL -u 155.210.154.201\n"
    echo

  fi
}

# :command.usage
lab_wake_usage() {
  if [[ -n $long_usage ]]; then
    printf "lab wake - Wakes up a specific machine in the laboratory\n"
    echo

  else
    printf "lab wake - Wakes up a specific machine in the laboratory\n"
    echo

  fi

  printf "Alias: w\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lab wake [HOSTNAME] [OPTIONS]\n"
  printf "  lab wake --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--all, -a"
    printf "    Target all machines\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f FILEPATH"
    printf "    Allows to pass as data source a text file with the target addresses.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOSTNAME"
    printf "    Machine to wake\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  messylab w 155.210.154.201\n"
    echo

  fi
}

# :command.usage
lab_shutdown_usage() {
  if [[ -n $long_usage ]]; then
    printf "lab shutdown - Shut down a selected machine in the laboratory\n"
    echo

  else
    printf "lab shutdown - Shut down a selected machine in the laboratory\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lab shutdown [HOSTNAME] [OPTIONS]\n"
  printf "  lab shutdown --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--all, -a"
    printf "    Target all machines\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f FILEPATH"
    printf "    Allows to pass as data source a text file with the target addresses.\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOSTNAME"
    printf "    Machine to shut down\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  messylab s 155.210.154.201\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
lab_scan_command() {
  # src/scan_command.sh
  # echo "# this file is located in 'src/scan_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  # ----- CONFIG ---------
  account="a798095"
  # ----- COLORS ---------
  green='\e[0;32m'
  red='\e[0;31m'
  noc='\e[0m'
  # ----- FLAGS ----------
  flag_all=${args[--all]}
  flag_users=${args[--users]}
  flag_file=${args[--file]}
  # ----- ARGS -----------
  hostname=${args[hostname]}
  # ----- Global ---------
  target_list=()  # Lista de direcciones ip
  # ----------------------

  if [[ $flag_file ]]; then
      if [ -f $flag_file ]; then
          while read -r -d $'\n' linea; do
              target_list+=("$linea")
          done < $flag_file
      else

          echo "No existe"
          exit 1

      fi
  else
      if [[ $flag_all ]]; then
          # Rango de ips del lab102
          for i in {191..210}; do
              target_list+=("155.210.154.${i}")
          done
      else

          target_list=$hostname
      fi
  fi

  get_host () {
      local addr=$1
      host=$(host $addr 2>/dev/null | grep -oE '[^ ]+$' | cut -d'.' -f1)
      if echo $host | grep "NXDOMAIN" > /dev/null 2>&1; then
          host='unknown'
      fi
      echo $host
  }

  check_status() {
      local addr=$1
      ttl=$(ping -c 1 -W 2 $addr 2>&1 | grep -o 'ttl=[0-9]*' | cut -d= -f2)
      if [[ $ttl =~ ^[0-9]+$ ]]; then

          host=$(get_host $addr)

          if [ $ttl -le 64 ]; then
              status="${green}Unix/Linux${noc}"
          elif [ $ttl -le 128 ]; then
              status="${green}Windows${noc}"
          elif [ $ttl -le 254 ]; then
              status="${green}Solaris/AIX${noc}"
          fi

      else
          host="unknown   "
          status="${red}DOWN${noc}"
      fi

      echo -e "$host $addr $status"
  }

  # ----------------------------------------
  #                 SCANNING

  # ----------------------------------------

  for addr in "${target_list[@]}"; do
      status=$(check_status $addr)

      if [[ $flag_users ]]; then

          if echo $status | grep -q 'DOWN'; then break;
          else

              ssh_output=$(ssh -qt -o ConnectTimeout=2 -o StrictHostKeyChecking=no $account@$addr "who | cut -f1 -d' ' | sort -u")
              for user in $ssh_output; do
                  echo -e "$status $user"
              done
          fi

      else
          echo -e $status
      fi
  done
}

# :command.function
lab_wake_command() {
  # src/wake_command.sh
  # echo "# this file is located in 'src/wake_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

  # ----- CONFIG ---------
  account="a798095"
  central="155.210.154.100"
  # ----- COLORS ---------
  green='\e[0;32m'
  noc='\e[0m'
  # ----- FLAGS ----------
  flag_all=${args[--all]}
  flag_file=${args[--file]}
  # ----- ARGS -----------
  hostname=${args[hostname]}
  # ----- Global ---------
  target_list=()  # Lista de direcciones ip
  # ----------------------

  if [[ $flag_file ]]; then
      if [ -f $flag_file ]; then
          while read -r -d $'\n' linea; do
              target_list+=("$linea")
          done < $flag_file
      else

          echo "No existe"
          exit 1

      fi
  else
      if [[ $flag_all ]]; then
          # Rango de ips del lab102
          for i in {191..210}; do
              target_list+=("155.210.154.${i}")
          done
      else

          target_list=$hostname
      fi
  fi

  get_host () {
      local addr=$1
      host=$(host $addr 2>/dev/null | grep -oE '[^ ]+$' | cut -d'.' -f1)
      if echo $host | grep "NXDOMAIN" > /dev/null 2>&1; then
          host='unknown'
      fi
      echo $host
  }

  # ----------------------------------------
  #               POWERING UP

  # ----------------------------------------

  for addr in "${target_list[@]}"; do
      if ping -c 1 -W 2 $addr >/dev/null 2>&1; then
          # Busqueda del nombre del host
          host=$(get_host $addr)
          echo ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no ${account}@${central} "/usr/local/etc/wake -y ${host}"
          echo -e "${host} ${addr} is now ${green}up${noc}"
      fi
  done
}

# :command.function
lab_shutdown_command() {
  # src/shutdown_command.sh
  # echo "# this file is located in 'src/shutdown_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  # ----- CONFIG ---------
  account="a798095"
  central="155.210.154.100"
  # ----- FLAGS ----------
  flag_all=${args[--all]}
  flag_file=${args[--file]}
  # ----- ARGS -----------
  hostname=${args[hostname]}
  # ----- Global ---------
  target_list=()  # Lista de direcciones ip
  # ----------------------

  if [[ $flag_file ]]; then
      if [ -f $flag_file ]; then
          while read -r -d $'\n' linea; do
              target_list+=("$linea")
          done < $flag_file
      else

          echo "No existe"
          exit 1
      fi
  else
      if [[ $flag_all ]]; then
          # Rango de ips del lab102
          for i in {191..210}; do
              target_list+=("155.210.154.${i}")
          done
      else

          target_list=$hostname
      fi
  fi

  get_host () {
      local addr=$1
      host=$(host $addr 2>/dev/null | grep -oE '[^ ]+$' | cut -d'.' -f1)
      if echo $host | grep "NXDOMAIN" > /dev/null 2>&1; then
          host='unknown'
      fi
      echo $host
  }

  # ----------------------------------------
  #               SHUTING DOWN

  # ----------------------------------------

  for addr in "${target_list[@]}"; do
      # Prueba de conexion con el target
      if ! ping -c 1 -W 2 $addr >/dev/null 2>&1; then
          echo "can't connect to: $addr"
          break
      fi
      set +x
      # comprobar el numero de usuarios conectados a la maquina
      users_connected=$(ssh -qt -o ConnectTimeout=2 -o StrictHostKeyChecking=no ${account}@${addr} "who | cut -f1 -d' ' | sort -u")
      num_users=$(echo "$users_connected" | wc -l)

      if [ $num_users -gt 1 ]; then
          echo "La maquina esta siendo usada por mas de un usuario"
          break
      fi

      # obtiene las maquinas virtuales que se estan ejecutando en la maquina $addr
      vm_running=$(echo $(ssh -qt -o ConnectTimeout=2 -o StrictHostKeyChecking=no ${account}@${addr} "virsh -c qemu:///system list | tail -n +3 | tr -s ' ' | cut -f3 -d' ' | grep -v '^$' | wc -l") | tr -d '\r')

      # comprueba si hay maquinas virtuales en ejecucion
      if [ $vm_running -eq 1 ]; then
          echo "Hay $vm_running maquina virtual ejecutandose"
          break
      elif [ $vm_running -gt 1 ]; then
          echo "Hay $vm_running maquinas virtuales ejecutandose"
          break
      fi

      # # Busqueda del nombre del host
      host=$(get_host $addr)

      echo ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no ${account}@${central} "/usr/local/etc/shutdown.sh -y ${host}"
      echo -e "$host ${addr} is now ${red}down${noc}"
  done
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lab_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    scan | sL)
      action="scan"
      shift
      lab_scan_parse_requirements "$@"
      shift $#
      ;;

    wake | w)
      action="wake"
      shift
      lab_wake_parse_requirements "$@"
      shift $#
      ;;

    shutdown | s)
      action="shutdown"
      shift
      lab_shutdown_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lab_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lab_scan_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lab_scan_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="scan"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --all | -a)

        # :flag.case_no_arg
        args['--all']=1
        shift
        ;;

      # :flag.case
      --users | -u)

        # :flag.case_no_arg
        args['--users']=1
        shift
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f FILEPATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hostname']+x} ]]; then

          args['hostname']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
lab_wake_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lab_wake_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="wake"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --all | -a)

        # :flag.case_no_arg
        args['--all']=1
        shift
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f FILEPATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hostname']+x} ]]; then

          args['hostname']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
lab_shutdown_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lab_shutdown_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="shutdown"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --all | -a)

        # :flag.case_no_arg
        args['--all']=1
        shift
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f FILEPATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['hostname']+x} ]]; then

          args['hostname']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "scan")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        lab_scan_usage
      else
        lab_scan_command
      fi
      ;;

    "wake")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        lab_wake_usage
      else
        lab_wake_command
      fi
      ;;

    "shutdown")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        lab_shutdown_usage
      else
        lab_shutdown_command
      fi
      ;;

  esac
}

initialize
run "$@"
